@page "/createmeal"
@using AiChef.Shared
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager navigationManager

<PageTitle>AI Chef - Create Meal</PageTitle>
<div class="container mt-5">
    <div class="row">
        <div class="col">
            <h1>Create Meal</h1>
            <EditForm EditContext="@editcontext"> <!-- Form for creating a meal -->
                <div class="row gy-2">
                    <div class="col-12">
                        <label class="form-label">Meal Time</label> <!-- Dropdown for selecting meal time -->
                        <InputSelect @bind-Value="meal.mealtime" class="form-select"> 
                            <option value="Breakfast">Breakfast</option>
                            <option value="Lunch">Lunch</option>
                            <option value="Dinner">Dinner</option>
                            <option value="Dessert">Dessert</option>
                        </InputSelect>
                    </div>
                    <div class="col-12">
                        <label class="form-label">Ingredient</label>
                        <InputText placeholder="Add Ingredient" maxlength="30" @bind-Value="meal.ingredient" class="form-control mb-2"></InputText>
                    </div>
                    <div class="col-12">
                        <button class="btn btn-outline-success" @onclick="AddIngredient">Add</button>
                        <button class="btn btn-outline-danger" @onclick="RemoveAll">Clear</button>
                    </div>
                    <div class="col-12 mt-3">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Ingredients</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in ingredients) 
                                    {
                                        <tr>
                                            <td>@item.Description</td>
                                            <td class="text-end pe-3">
                                                <button class="btn btn-outline-danger" @onclick="() => RemoveIngredient(item.Id)"><i class="bi bi-trash-fill"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                    <div class="col-12">
                        <button class="btn btn-success rounded" @onclick="HandleSubmit">Generate</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    [CascadingParameter] public RecipeState? rState { get; set; } // Accessing the state from the parent component]
    private EditContext? editcontext;
    private List<Ingredient> ingredients = new List<Ingredient>(); // List to hold ingredients
    private Meal meal = new(); // Meal object to bind to the form

    protected override void OnInitialized() 
    {
        if (rState is null)
        {
            navigationManager.NavigateTo("/", forceLoad: true); // Redirect to home if state is null
            return;
        }

        editcontext = new(meal); 
        meal.mealtime = rState.MealTime; // Set the initial meal time from the state
        ingredients = rState.Ingredients; // Load existing ingredients from the state
    }

    private class Meal // Class to hold the meal time and ingredient
    {
        public string? mealtime{ get; set; }
        public string? ingredient{ get; set; }
    }
    private void AddIngredient() // Method to add an ingredient to the list
    {
        if (!string.IsNullOrEmpty(meal.ingredient)) // Check if the ingredient is not empty before adding
        {
            ingredients.Add(new Ingredient () 
            {
                    Id = Guid.NewGuid(),
                    Description = meal.ingredient
            }
            );
        }
        //clear the text box
        meal.ingredient = string.Empty;
    }
    private void RemoveAll() // Method to clear all ingredients from the list
    {
        ingredients.Clear();
    }

    private void RemoveIngredient(Guid id) // Method to remove a specific ingredient from the list
    {
        ingredients.Remove(ingredients.First(x=> x.Id==id));
    }

    private void HandleSubmit() // Method to handle form submission
    
    {
        rState.MealTime = meal.mealtime; // Update the state with the selected meal time
        rState.Ingredients = ingredients; // Update the state with the list of ingredients
        navigationManager.NavigateTo("/mealideas");
    }
}
